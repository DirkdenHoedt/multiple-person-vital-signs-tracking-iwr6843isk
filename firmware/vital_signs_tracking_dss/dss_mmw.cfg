/**
 * dss_mmw.cfg
 *
 * DSS MMW RTOS Configuration
 *
 * Copyright (C) 2019 Texas Instruments Incorporated - http://www.ti.com/ 
 * 
 * 
 *  Redistribution and use in source and binary forms, with or without 
 *  modification, are permitted provided that the following conditions 
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the   
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/
environment['xdc.cfg.check.fatal'] = 'false';

/********************************************************************
 ************************** BIOS Modules ****************************
 ********************************************************************/
var Memory    = xdc.useModule('xdc.runtime.Memory');
var BIOS      = xdc.useModule('ti.sysbios.BIOS');
var HeapMem   = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Task      = xdc.useModule('ti.sysbios.knl.Task');
var Idle      = xdc.useModule('ti.sysbios.knl.Idle');
var SEM       = xdc.useModule('ti.sysbios.knl.Semaphore');
var Event     = xdc.useModule('ti.sysbios.knl.Event');
var Hwi       = xdc.useModule('ti.sysbios.family.c64p.Hwi');
var System    = xdc.useModule('xdc.runtime.System');
var SysStd    = xdc.useModule('xdc.runtime.SysStd');
var EventCombiner = xdc.useModule('ti.sysbios.family.c64p.EventCombiner');
var Load      = xdc.useModule('ti.sysbios.utils.Load');

System.SupportProxy = SysStd;

/*
 * Enable Event Groups here and registering of ISR for specific GEM INTC is done
 * using EventCombiner_dispatchPlug() and Hwi_eventMap() APIs
 */
EventCombiner.eventGroupHwiNum[0] = 7;
EventCombiner.eventGroupHwiNum[1] = 8;
EventCombiner.eventGroupHwiNum[2] = 9;
EventCombiner.eventGroupHwiNum[3] = 10;

/* Default Heap Creation: Local L2 memory */
var heapMemParams           = new HeapMem.Params();
heapMemParams.size          = 16*1024;
heapMemParams.sectionName   = "systemHeap";
Program.global.heap0        = HeapMem.create(heapMemParams);
Memory.defaultHeapInstance  = Program.global.heap0;

/* Enable BIOS Task Scheduler */
BIOS.taskEnabled			= true;

/* do not call update for load - Application will call it at inter-frame boundary */
Load.updateInIdle = false; 

/*
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 1024;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
var Diags = xdc.useModule('xdc.runtime.Diags');
Hwi.common$.logger = logger0;
Hwi.common$.diags_USER1 = Diags.RUNTIME_ON;
Hwi.common$.diags_USER2 = Diags.RUNTIME_ON;
*/

/*
Task.common$.diags_USER1 = Diags.ALWAYS_ON;
Task.common$.diags_USER2 = Diags.ALWAYS_ON;
*/
//Program.sectMap[".vecs"]	            =   "VECTORS";

/* Some options to reduce BIOS code and data size, see BIOS User Guide section 
   "Minimizing the Application Footprint" */
System.maxAtexitHandlers = 0;
BIOS.swiEnabled = false; /* We don't use SWIs */
BIOS.libType = BIOS.LibType_Custom;
Task.defaultStackSize = 1500;
Task.idleTaskStackSize = 800;
Program.stack = 1048; /* for isr context */
var Text = xdc.useModule('xdc.runtime.Text');
Text.isLoaded = false;

